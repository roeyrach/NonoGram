import random
import numpy as np
import matplotlib.pyplot as plt
import itertools
from binarytree import tree, bst, heap

#####################PRAMETRERS##########################
num_of_options = 0

patterns1 = [(1,), (4,), (3,), (1, 2), (1, 3), (2, 1), (1,), (5,), (2,)
    , (5,), (2, 1), (2,)]
patterns2 = [(6,), (5,), (5,), (10,), (11,), (5, 4), (3, 1, 4), (2, 1, 4), (2, 1, 4), (2, 1, 4), (3, 2), (3, 2),
             (3, 2, 1), (4, 3, 1), (4, 2, 2), (5, 5), (6, 4), (8, 4), (18,), (14, 2), (13, 2), (11, 4), (16,), (7, 3),
             (8,), (1,), (2,), (2,), (4,), (11,), (13,), (15,), (9, 3), (8, 3), (7, 5, 2), (7, 3, 4), (6, 2, 3),
             (8, 3, 2), (13, 2), (10, 2), (5, 5, 3), (4, 1, 4, 6), (1, 2, 2, 8), (3, 1, 10), (3, 1, 4, 4), (2, 1, 2, 3),
             (2, 1, 2), (2, 1), (2, 1), (1,)]
patterns3 = [(3, 3, 3), (2, 2, 5), (1, 2, 3, 2), (2, 2, 3, 1), (3, 7, 1), (9, 1), (10, 2), (10, 1), (11, 1), (1, 2, 7),
             (4, 6), (4, 5), (9,), (8,), (5,), (7,), (4,), (6,), (3, 2), (3,), (2, 1), (2, 1), (3, 1, 2), (1, 3, 4, 1),
             (12, 2), (13, 5), (6, 6), (3, 6), (10, 1), (10, 2), (14,), (11,), (8,), (9,), (8,), (5,), (2,), (1, 2),
             (2, 2), (5,)]
patterns = patterns2
line_size = int(len(patterns) / 2)
lines_lst = (list(itertools.product([0, 1], repeat=line_size)))
lines = set(lines_lst)
lines_sums = np.array([sum(l) for l in lines_lst])
lines_sums_idx_sorted = np.argsort(lines_sums)
lines_sums_sorted = np.sort(lines_sums)
print("done")


grid = [[-1 for j in range(line_size)] for i in range(line_size)]
grid = np.array(grid)

#########################################################


def check_if_pattern_in_line(pattern: tuple, line, current_line):
    continue_index = 0
    if sum(line) != sum(pattern):
        return False
    for group in pattern:
        num_of_fits = 0
        for i in range(continue_index, len(line)):
            if line[i] == 1:
                num_of_fits += 1
            elif line[i] == 0 and num_of_fits > 0:
                break
            continue_index += 1
        if num_of_fits != group:
            return False
    for i in range(len(line)):
        if line[i] != current_line[i] and current_line[i] != -1:
            return False
    return True


def get_all_possible_lines(pattern, current_line, group):
    new_line = set({})
    for ln in group:
        if check_if_pattern_in_line(pattern, ln, current_line):
            new_line.add(ln)
    return new_line


sub_options = []
for i in range(2 * line_size):
    sub_sub = np.where(lines_sums == sum(patterns[i]))[0]
    sub_sub = [lines_lst[j] for j in sub_sub]
    sub_sub = set(sub_sub)
    if i < line_size:
        sub_options.append(get_all_possible_lines(patterns[i], grid[line_size - i - 1, :], sub_sub))
    else:
        sub_options.append(get_all_possible_lines(patterns[i],grid[:, i - line_size], sub_sub))
    print(f"{i + 1}/{2 * line_size}", flush=True)



def write_line(all_options, current_line):
    all_options = list(all_options)
    all_options = np.array(all_options)
    if all_options.shape[1] == 0:
        all_options = np.array([all_options])
    for idx in range(line_size):
        if sum(all_options[:, idx]) == all_options.shape[0]:
            current_line[idx] = 1
        elif sum(all_options[:, idx]) == 0:
            current_line[idx] = 0


def is_done():
    for i in range(line_size):
        for j in range(line_size):
            if grid[i, j] == -1:
                return False
    return True


if __name__ == '__main__':
    while not is_done():
        for i in range(2 * line_size):
            if i < line_size:
                if - 1 not in grid[line_size - i - 1, :]:
                    continue
                write_line(get_all_possible_lines(patterns[i], grid[line_size - i - 1, :], sub_options[i]), grid[line_size - i - 1, :])
            else:
                if - 1 not in grid[:, i - line_size]:
                    continue
                write_line(get_all_possible_lines(patterns[i], grid[:, i - line_size], sub_options[i]), grid[:, i - line_size])
    # plt.imshow(grid)
    # plt.colorbar()
    # plt.show(block=False)
    # plt.pause(0.0001)
    # plt.clf()
    # plt.cla()
    # plt.close()
    plt.imshow(grid)
    plt.colorbar()
    plt.show()

